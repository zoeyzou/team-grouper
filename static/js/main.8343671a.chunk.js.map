{"version":3,"sources":["utils/randomizeArray.ts","containers/app/index.tsx","utils/groupArray.ts","stores/utils/logger.ts","stores/counter/slice.ts","stores/store.ts","serviceWorker.ts","styled-components/global-styles.ts","index.tsx"],"names":["randomizeArray","array","i","length","j","Math","floor","random","App","useState","studentInput","setStudentInput","mentorInput","setMentorInput","studentList","setStudentList","mentorList","setMentorList","groups","setGroups","changeHandler","e","target","name","value","submitHandler","preventDefault","currentTarget","studentNames","includes","split","map","item","trim","mentorNames","style","display","flexFlow","justifyContent","alignItems","onSubmit","type","onChange","key","onClick","generatedGroups","arrayA","arrayB","listA","slice","listB","groupAmount","reduce","accu","current","group","splice","groupArray","border","member","logger","store","next","action","console","info","result","log","getState","groupEnd","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","payload","actions","configureStore","reducer","counter","counterReducer","middleware","loggerMiddleware","getDefaultMiddleware","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8343671a.chunk.js","sourcesContent":["export function randomizeArray(array: string[]) {\n  // eslint-disable-next-line no-plusplus\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[array[i], array[j]] = [array[j], array[i]]\n  }\n  return array\n}\n","import React, { useState } from 'react'\nimport { randomizeArray } from 'utils/randomizeArray'\nimport { groupArray } from 'utils/groupArray'\n\nfunction App() {\n  const [studentInput, setStudentInput] = useState<string>('')\n  const [mentorInput, setMentorInput] = useState<string>('')\n  const [studentList, setStudentList] = useState<string[]>([])\n  const [mentorList, setMentorList] = useState<string[]>([])\n  const [groups, setGroups] = useState<string[][]>([])\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.name === 'student') {\n      setStudentInput(e.target.value)\n    } else {\n      setMentorInput(e.target.value)\n    }\n  }\n\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const field = e.currentTarget.name\n\n    if (field === 'student') {\n      let studentNames: string[] = []\n      if (studentInput.includes(',')) {\n        studentNames = studentInput.split(',').map((item) => item.trim())\n      } else {\n        studentNames = [studentInput]\n      }\n      setStudentList([...studentList, ...studentNames])\n      setStudentInput('')\n    } else {\n      let mentorNames: string[] = []\n      if (mentorInput.includes(',')) {\n        mentorNames = mentorInput.split(',').map((item) => item.trim())\n      } else {\n        mentorNames = [mentorInput]\n      }\n      setMentorList([...mentorList, ...mentorNames])\n      setMentorInput('')\n    }\n  }\n\n  const generate = () => {\n    const generatedGroups = groupArray(randomizeArray(studentList), randomizeArray(mentorList))\n    setGroups(generatedGroups)\n  }\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexFlow: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <form onSubmit={submitHandler} name=\"student\">\n        <h1>List of students</h1>\n        <input type=\"text\" value={studentInput} onChange={changeHandler} name=\"student\" />\n        <button type=\"submit\">Add</button>\n      </form>\n      <ul>\n        {studentList.map((name) => (\n          <li key={name}>{name}</li>\n        ))}\n      </ul>\n      <form onSubmit={submitHandler} name=\"mentor\">\n        <h1>List of mentors</h1>\n        <input type=\"text\" value={mentorInput} onChange={changeHandler} name=\"mentor\" />\n        <button type=\"submit\">Add</button>\n      </form>\n      <ul>\n        {mentorList.map((name) => (\n          <li key={name}>{name}</li>\n        ))}\n      </ul>\n      <button type=\"button\" onClick={generate}>\n        Generate groups\n      </button>\n      <ol>\n        {groups.map((group) => (\n          <li key={Math.random()} style={{ border: '1px solid yellow' }}>\n            <ul>\n              {group.map((member) => (\n                <li key={member}>{member}</li>\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ol>\n    </div>\n  )\n}\n\nexport default App\n","export function groupArray(arrayA: string[], arrayB: string[]): string[][] {\n  const listA = arrayA.slice()\n  const listB = arrayB.slice()\n\n  const groupAmount = Math.floor(listA.length / listB.length)\n\n  return listB.reduce((accu, current) => {\n    let group = [current]\n    if (listA.length < groupAmount * 2) {\n      group = [...group, ...listA]\n    } else {\n      group = [...group, ...listA.splice(0, groupAmount)]\n    }\n    return [...accu, group]\n  }, [] as string[][])\n}\n","/* eslint-disable no-console */\nconst logger = (store: any) => (next: any) => (action: any) => {\n  console.group(action.type)\n  console.info('dispatching', action)\n  const result = next(action)\n  console.log('next state', store.getState())\n  console.groupEnd()\n  return result\n}\n/* eslint-enable no-console */\n\nexport default logger\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport * as thunks from './thunks'\n\ninterface CounterState {\n  value: number\n}\n\nconst initialState: CounterState = {\n  value: 0,\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport const { incrementAsync } = thunks\n\nexport default counterSlice.reducer\n","import { configureStore, ThunkAction, Action, getDefaultMiddleware } from '@reduxjs/toolkit'\n\nimport loggerMiddleware from './utils/logger'\nimport counterReducer from './counter/slice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n  middleware: [loggerMiddleware, ...getDefaultMiddleware()],\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n   body {\n      margin: 0;\n   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',\n      'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n   -webkit-font-smoothing: antialiased;\n   -moz-osx-font-smoothing: grayscale;\n   }\n\n   code {\n      font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n   }\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'containers/app'\nimport { store } from 'stores/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport { GlobalStyle } from 'styled-components/global-styles'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}